#!/usr/bin/env python

# Copyright 2013 Mike Burns
# License under BSD. See LICENSE for details.

import sys
import os
import tempfile
import readline
import re
import subprocess


def run_commands(fh):
    for cmd in fh:
        handle_command(cmd)


def run_visual_command():
    (fd, pathname) = tempfile.mkstemp(suffix='sh')
    fh = os.fdopen(fd)
    try:
        if os.system("%s %s" % (get_editor(), pathname)) == 0:
            run_commands(fh)
    finally:
        fh.close()
        os.unlink(pathname)


def get_editor():
    return os.environ['VISUAL'] or os.environ['EDITOR'] or 'vi'


def get_shell():
    return os.environ['SHELL'] or 'sh'


def run_shell(sh_cmd):
    def runner():
        if sh_cmd == "":
            os.system("%s -i" % get_shell())
        else:
            os.system("%s -c '%s'" % (get_shell(), sh_cmd))
    return runner


def run_help():
    print "\\!\trun shell"
    print "\\?\tshow this help"
    print "\\h\tshow help for a give topic"
    print "\\q\tquit"
    print "\\s\tswitch directory"
    print "\\v\topen editor"


def run_git_help(topic):
    def helper():
        os.system("git --help %s" % topic)
    return helper


def run_quit():
    raise EOFError


def run_switch_dir(directory):
    def switcher():
        if directory == "":
            print os.getcwd()
        else:
            os.chdir(os.path.expanduser(directory))
    return switcher


def handle_flag(flag):
    {'v': run_visual_command,
     '!': run_shell(flag.lstrip('!')),
     '?': run_help,
     'h': run_git_help(flag.lstrip('h')),
     'q': run_quit,
     's': run_switch_dir(flag.lstrip('s'))
     }[flag[0]]()


def handle_command(cmd):
    if cmd == "":
        handle_command("status")
    elif cmd.startswith("#"):
        pass
    elif cmd.startswith("\\"):
        handle_flag(cmd.lstrip("\\"))
    else:
        os.system("git %s" % cmd)


def prompt_format():
    """
    %c - start coloring based on status
    %w - stop coloring based on status
    %b - branch name
    %# - prompt terminator, changes based on status
    %d - current directory, absolute
    %D - current directory, just basename
    """
    return "%b%c%#%w "


def git_status():
    status = os.popen('git status 2>&1').read()
    if re.search("Not a git repository", status):
        return ('uninitialized', 'uninitialized')

    branch = re.search("On branch (.*)", status).group(1)

    if re.search("working directory clean", status):
        return (branch, 'clean')
    elif re.search("[uU]ntracked files", status):
        return (branch, 'untracked')
    elif re.search("Changes to be committed", status):
        return (branch, 'added')
    elif re.search("deleted:", status):
        return (branch, 'deleted')
    elif re.search("modified:", status):
        return (branch, 'modified')


def prompt_color(clean):
    return {'clean': "\033[00m",
            'untracked': "\033[00;31m",
            'added': "\033[00;33m",
            'deleted': "\033[00;33m",
            'modified': "\033[00;33m",
            'uninitialized': "\033[00;41m"}[clean]


def prompt_reset_color():
    return "\033[00m"


def prompt_terminator(clean):
    return {'clean': '@',
            'untracked': '!',
            'added': '&',
            'deleted': '&',
            'modified': '&',
            'uninitialized': '!!'}[clean]


def build_prompt():
    (branch, clean) = git_status()
    prompt = prompt_format().replace('%c', prompt_color(clean)).replace('%w', prompt_reset_color()).replace('%b', branch).replace('%#', prompt_terminator(clean)).replace('%d', os.getcwd()).replace('%D', os.path.basename(os.getcwd()))
    return prompt


def interactive():
    return os.isatty(sys.stdin.fileno()) and len(sys.argv) == 1


class Completer(object):
    """
    Callable object that provides readline tab completion for git commands.
    """

    @classmethod
    def register(cls):
        """
        Registers an instance of Completer as the readline completer, and binds
        the tab key to complete in a way that is compatible with both
        GNU readline and libedit.
        """
        if 'libedit' in readline.__doc__:
            readline.parse_and_bind('bind ^I rl_complete')
        else:
            readline.parse_and_bind('tab: complete')
        readline.set_completer(cls())

    def __call__(self, text, n):
        """
        Behaves as a readline completion function (that is, given text and n,
        it returns the nth possible completion beginning with text)
        """
        competions = self._competions_for(text)
        if n < len(competions):
            return competions[n]
        else:
            return None

    def _competions_for(self, text):
        return filter(lambda s: s.startswith(text), self._git_commands())

    def _git_commands(self):
        """
        Returns all possible git commands, as listed by `git help -a`. This is
        based on the official git bash completion script.
        """
        if not hasattr(self, '_commands'):
            matcher = re.compile(r'^  [^ ]')
            splitter = re.compile(r'\s+')
            self._commands = set()
            output = subprocess.check_output(('/usr/bin/env', 'git', 'help', '-a'))
            for line in output.splitlines():
                if matcher.match(line):
                    map(self._commands.add, splitter.split(line.strip()))
        return self._commands


if interactive():
    try:
        Completer.register()
        while True:
            cmd = raw_input(build_prompt())
            handle_command(cmd)
    except EOFError:
        print
        pass
elif len(sys.argv) > 1:
    fh = open(sys.argv[1])
    run_commands(fh)
    fh.close()
else:
    run_commands(sys.stdin)
